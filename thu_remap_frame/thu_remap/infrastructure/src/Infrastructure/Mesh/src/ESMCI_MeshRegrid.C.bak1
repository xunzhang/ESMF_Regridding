// $Id: ESMCI_MeshRegrid.C,v 1.26 2011/07/04 05:11:21 oehmke Exp $
//
// Earth System Modeling Framework
// Copyright 2002-2009, University Corporation for Atmospheric Research, 
// Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
// Laboratory, University of Michigan, National Centers for Environmental 
// Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
// NASA Goddard Space Flight Center.
// Licensed under the University of Illinois-NCSA License.
//
//==============================================================================

#include <Mesh/include/ESMCI_MeshRegrid.h>
#include <cmath>

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "grid.h"
#include <string.h>
#include <sys/time.h>
#include "bilinear_remap.h"
#include "remap_base.h"

//-----------------------------------------------------------------------------
// leave the following line as-is; it will insert the cvs ident string
// into the object file for tracking purposes.
static const char *const version = "$Id: ESMCI_MeshRegrid.C,v 1.26 2011/07/04 05:11:21 oehmke Exp $";
//-----------------------------------------------------------------------------

namespace ESMCI {

#ifndef PI
#define PI 3.141592653589793238
#endif

	int print_debug_info(IWeights &wts) {
		// print out info of weight matrix
		int snegcount = 0;
		int stotalcount = 0;
		int negcount = 0;
		int rowsum = 0;
		int rowsumcount = 0;
		int totalcount = 0;
		int gt1count = 0;
		double max = 0;
		double maxneg = 0;
		double min = 0;
		double badcolid = 0;
		double badrowid = 0;


		IWeights::WeightMap::iterator wit = wts.begin_row(), wet = wts.end_row();
		//IWeights::WeightMap::iterator wit = stw.begin_row(), wet = stw.end_row();
		for (; wit != wet; ++wit) {
			const IWeights::Entry &_row = wit->first;
			const std::vector<IWeights::Entry> &_col = wit->second;

			//    std::cout<<Par::Rank()<<"  "<<_row.id<<"    ";
			rowsum = 0;
			for (UInt c = 0; c < _col.size(); ++c) {
				double value = _col[c].value;
				if (value < 0) negcount++;
				if (value > max) max = value;
				if (value < min) min = value;
				if (value > 1) gt1count++;
				if (value < 0 && std::abs(value) > std::abs(maxneg)) {
					maxneg = value;
					badcolid = _col[c].id;
					badrowid = _row.id;
				}
				rowsum += value;

				//      std::cout<<std::setprecision(3)<<_col[c].value<<"  ";
			}
			if (rowsum > 1.01 || rowsum < .99) rowsumcount++;
			totalcount++;
			//    std::cout<<std::endl;
			for (UInt c = 0; c < _col.size(); ++c) {
				double value = _col[c].value;

			}
		}

		std::cout<<std::endl<<std::setw(30)<<"Negative weights count = "<<negcount
			<<std::endl<<std::setw(30)<<"Greater than 1 count = "<<gt1count
			<<std::endl<<std::setw(30)<<"Row sum not 1 count = "<<rowsumcount
			<<std::endl<<std::setw(30)<<"Total row count = "<<totalcount
			<<std::endl<<std::setw(30)<<"Max weight  = "<<max
			<<std::endl<<std::setw(30)<<"Min weight = "<<min
			<<std::endl<<std::setw(30)<<"Max neg weight = "<<maxneg
			<<std::endl<<std::setw(30)<<"Bad weight ["<<badrowid<<","<<badcolid<<"]"
			<<std::endl<<std::endl;

		return 1;
	}

	int form_neg_wts_field(IWeights &wts, Mesh &srcmesh, MEField<> *src_neg_wts, 
			Mesh &dstmesh, MEField<> *dst_neg_wts)
	{
		IWeights::WeightMap::const_iterator wi = wts.begin_row(), we = wts.end_row();
		for (; wi != we; ++wi) {
			const IWeights::Entry &_row = wi->first;
			const std::vector<IWeights::Entry> &_col = wi->second;
			// look for destination node id matching _row.id
			MeshDB::MeshObjIDMap::iterator ndi =
				dstmesh.map_find(MeshObj::NODE, _row.id);
			ThrowRequire(ndi != dstmesh.map_end(MeshObj::NODE));
			double *Ddata = dst_neg_wts->data(*ndi);
			double min = 1.0;
			double max = 0.0;
			for (UInt c = 0; c < _col.size(); ++c) {
				double value = _col[c].value;
				if (value < min) min = value;
				if (value > max) max = value;
			}
			*Ddata = 0;
			if (min < 0) *Ddata = min;
			if (max > 1.0) *Ddata = max;
			if (min < 0 && max > 1.0) *Ddata = std::max(std::abs(max),std::abs(min));
		}
		return 1;
	}

	// Meshes are already committed
	int online_regrid(Mesh &srcmesh, Mesh &dstmesh, IWeights &wts,
			int *regridConserve, int *regridMethod,
			int *regridPoleType, int *regridPoleNPnts, 
			int *regridScheme, int *unmappedaction) {

		// Conservative regridding
		switch (*regridConserve) {
			case (ESMC_REGRID_CONSERVE_ON): {

								// Get the integration weights
								MEField<> *src_iwts = srcmesh.GetField("iwts");
								if (!src_iwts) Throw() << "Integration weights needed for conservative regridding."
									<<std::endl;
								MEField<> *dst_iwts = dstmesh.GetField("iwts");
								if (!dst_iwts) Throw() << "Integration weights needed for conservative regridding."
									<<std::endl;

								if (!csrv(srcmesh, dstmesh, wts, src_iwts, dst_iwts, regridMethod, regridScheme, 
											regridPoleType, regridPoleNPnts, unmappedaction))
									Throw() << "Conservative regridding error" << std::endl;

							} break;
							// NON Conservative regridding
			case (ESMC_REGRID_CONSERVE_OFF): {
								 //std::cout << "baby on" << std::endl;
								 if (!regrid(srcmesh, dstmesh, 0, wts, regridMethod, regridScheme, 
											 regridPoleType, regridPoleNPnts, unmappedaction))
									 Throw() << "Regridding error" << std::endl;

								 // Remove non-locally owned weights (assuming destination mesh decomposition)

								 // This prune won't work for conserve
								 // because wghts not on nodes, earlier mask code shouldn't allow weights
								 // at this point anyways. 
								 if(*regridMethod != ESMC_REGRID_METHOD_CONSERVE) wts.Prune(dstmesh, 0);

							 } break;

			default:
							 Throw() << "Regridding method:" << *regridConserve << " is not implemented";
		}

		return 1;
	}

	// Mesh are not committed yet
#ifdef REGRIDTIMING
	int offline_regrid(Mesh &srcmesh, Mesh &dstmesh, Mesh &dstmeshcpy,
			int *regridConserve, int *regridMethod, 
			int *regridPoleType, int *regridPoleNPnts,
			char *srcGridFile, char *dstGridFile, char *wghtFile,
			regridTimer &rt) {
#else
		int offline_regrid(Mesh &srcmesh, Mesh &dstmesh, Mesh &dstmeshcpy,
				int *regridConserve, int *regridMethod, 
				int *regridPoleType, int *regridPoleNPnts,
				char *srcGridFile, char *dstGridFile, char *wghtFile) {
#endif

			// Conflict management
			int regridScheme = ESMC_REGRID_SCHEME_FULL3D;
			int unmappedaction = ESMC_UNMAPPEDACTION_ERROR;

			IWeights wts;
			MEField<> *src_iwts, *dst_iwts, *dst_iwtscpy;

#ifdef DEBUG
			// Add fields to mesh to hold negative weights
			MEField<> *src_neg_wts, *dst_neg_wts;
			Context ctxt; ctxt.flip();
			src_neg_wts = srcmesh.RegisterField("negwts",
					MEFamilyStd::instance(), MeshObj::ELEMENT, ctxt, 1, true);
			dst_neg_wts = dstmesh.RegisterField("negwts",
					MEFamilyStd::instance(), MeshObj::ELEMENT, ctxt, 1, true);
#endif

			switch (*regridConserve) {

				// Conservative regridding
				case (ESMC_REGRID_CONSERVE_ON): {

									// Add fields to mesh
									Context ctxt; ctxt.flip();
									src_iwts = srcmesh.RegisterField("iwts",
											MEFamilyStd::instance(), MeshObj::ELEMENT, ctxt, 1, true);

									dst_iwts = dstmesh.RegisterField("iwts",
											MEFamilyStd::instance(), MeshObj::ELEMENT, ctxt, 1, true);

									// generate integration weights on the copy
									// TODO: remove this (and the dstcpy mesh passed in) when the 
									//       write bug with pole assimilation is fixed.
									dst_iwtscpy = dstmeshcpy.RegisterField("iwts",
											MEFamilyStd::instance(), MeshObj::ELEMENT, ctxt, 1, true);
									dstmeshcpy.Commit();
									Integrate dig(dstmeshcpy);
									dig.clearWeights(dst_iwtscpy);
									if ((regridScheme == ESMC_REGRID_SCHEME_FULL3D) ||
											(regridScheme == ESMC_REGRID_SCHEME_DCON3DWPOLE) ||
											(regridScheme == ESMC_REGRID_SCHEME_FULLTOREG3D)) {
										for (UInt i = 1; i <= 7; ++i)
											dig.AddPoleWeights(dstmeshcpy,i,dst_iwtscpy);
									}
									dig.intWeights(dst_iwtscpy);

									// Commit the meshes
									srcmesh.Commit();
									dstmesh.Commit();

									if (!csrv(srcmesh, dstmesh, wts, src_iwts, dst_iwts, regridMethod, &regridScheme,
												regridPoleType, regridPoleNPnts, &unmappedaction))
										Throw() << "Conservative regridding error" << std::endl;
								} break;

								// NON Conservative regridding
				case (ESMC_REGRID_CONSERVE_OFF): {

									 // Commit the meshes
									 srcmesh.Commit();
									 dstmesh.Commit();
									 dstmeshcpy.Commit();
									 //std::cout << "baby yes" << std::endl;
									 /*if (!*/regrid(srcmesh, dstmesh, 0, wts, regridMethod, &regridScheme,
												 regridPoleType, regridPoleNPnts, &unmappedaction);//)
									 //  Throw() << "Regridding error" << std::endl;

									 // the mask
									 MEField<> *mask = dstmesh.GetField("MASK_IO");
									 ThrowRequire(mask);
									 wts.Prune(dstmesh, mask);

								 } break;

				default:
								 Throw() << "Regridding method:" << *regridConserve << " is not implemented";
			}

			// regridTimer
#ifdef REGRIDTIMING
			MPI_Barrier(MPI_COMM_WORLD);
			rt.regridComplete = MPI_Wtime();
#endif

			// Redistribute weights in an IO friendly decomposition
			if (Par::Rank() == 0) std::cout << "Writing weights to " << wghtFile << std::endl;
			GatherForWrite(wts);

			// Write the weights
			WriteNCMatFilePar(srcGridFile, dstGridFile, wghtFile,
					wts, srcmesh, dstmesh, dstmeshcpy,
					regridConserve, regridMethod, NCMATPAR_ORDER_SEQ);

#ifdef DEBUG
			print_debug_info(wts);
			form_neg_wts_field(wts, srcmesh, src_neg_wts, dstmesh, dst_neg_wts);
			WriteMesh(srcmesh, "srcmesh");
			WriteMesh(dstmesh, "dstmesh");
#endif

			return 1;

		}

		void my_swap(double *x, double *y){
			double temp;
			temp = *x;
			*x = *y;
			*y = temp;
		}

		void my_swap_bool(bool *x, bool *y) {
			bool temp;
			temp = *x;
			*x = *y;
			*y = temp;
		}

		double cal_lats(double co[3]){
			return atan(co[2]/sqrt(co[0] * co[0] + co[1] * co[1]));
		}

		double cal_lons(double co[3]){
			if(co[1] == 0)
				return 0;
			if((co[0] == 0) && (co[1] > 0))
				return PI/2;
			if((co[0] == 0) && (co[1] < 0))
				return PI * 3 / 2;
			if((co[1] > 0) && (co[0] > 0))
				return atan(co[1]/co[0]);
			if((co[1] > 0) && (co[0] <0))
				return PI/2 + atan(-co[0]/co[1]);
			if((co[1] < 0) && (co[0] < 0))
				return PI + atan(co[1]/co[0]);
			if((co[1] < 0) && (co[0] > 0))
				return 2*PI - atan(-co[1]/co[0]);
			return -1;
		} 




		int regrid(Mesh &srcmesh, Mesh &dstmesh, Mesh *midmesh, IWeights &wts,
				int *regridMethod, int *regridScheme, 
				int *regridPoleType, int *regridPoleNPnts, 
				int *unmappedaction) {

			// See if it could have a pole
			//bool maybe_pole=false;


			//  if ((srcmesh.parametric_dim()==2) && 
			//    (srcmesh.spatial_dim()==3)) maybe_pole=true; 


			// Pole constraints
			//IWeights pole_constraints, stw;
			//UInt constraint_id = srcmesh.DefineContext("pole_constraints");
			/*
			   if (*regridMethod != ESMC_REGRID_METHOD_CONSERVE) { // No poles if conservative
			   if (maybe_pole) {
			   if (*regridPoleType == ESMC_REGRID_POLETYPE_ALL) {
			   for (UInt i = 1; i <= 7; ++i)
			   MeshAddPole(srcmesh, i, constraint_id, pole_constraints);
			   } else if (*regridPoleType == ESMC_REGRID_POLETYPE_NPNT) {
			   for (UInt i = 1; i <= 7; ++i)
			   MeshAddPoleNPnts(srcmesh, *regridPoleNPnts, i, constraint_id, pole_constraints);
			   } else if (*regridPoleType == ESMC_REGRID_POLETYPE_TEETH) {
			   for (UInt i = 1; i <= 7; ++i)
			   MeshAddPoleTeeth(srcmesh, i, constraint_id, pole_constraints);
			   }
			   }
			   }
			 */

			// edit by wuhong 
			unsigned int ndim_src, ndim_dst;
			int npnts_src, npnts_dst;
			int nlats_src, nlats_dst;
			int nlons_src, nlons_dst;
			double *center_lat_coords_src, *center_lat_coords_dst;
			double *center_lon_coords_src, *center_lon_coords_dst;	
			bool *mask_src, *mask_dst;

			double co[3];

			int i, k;

			MeshDB::const_iterator sb_src = srcmesh.node_begin();
			MeshDB::const_iterator se_src = srcmesh.node_end();

			MeshDB::const_iterator sb_dst = dstmesh.node_begin();
			MeshDB::const_iterator se_dst = dstmesh.node_end();

			ndim_src = srcmesh.parametric_dim();
			ndim_dst = dstmesh.parametric_dim();

			npnts_src = srcmesh.num_nodes();
			npnts_dst = dstmesh.num_nodes();

			center_lat_coords_src = new double [npnts_src];
			center_lon_coords_src = new double [npnts_src];

			center_lat_coords_dst = new double [npnts_dst];
			center_lon_coords_dst = new double [npnts_dst];

			mask_src = new bool [npnts_src];
			mask_dst = new bool [npnts_dst];

			MEField<> *src_field = srcmesh.GetCoordField();
			MEField<> *dst_field = dstmesh.GetCoordField();

			MEField<> *src_mask_ptr = srcmesh.GetField("mask");
			MEField<> *dst_mask_ptr = dstmesh.GetField("mask");

			//src
			for (k = 0; sb_src != se_src; ++sb_src, k++) {
				const MeshObj &node = *(sb_src);
				double *c1 = src_field->data(node);
				for(i = 0; i < 3; i++){
					co[i] = c1[i];
				}
				double *m = src_mask_ptr->data(node);
				//mask_src[k] = true;
				if(*m > 0.5)
					mask_src[k] = false;
				else	
					mask_src[k] = true;
				center_lat_coords_src[k] = 180 * cal_lats(co) / PI;
				center_lon_coords_src[k] = 180 * cal_lons(co) / PI;
			}

			for (k = 0; k < npnts_src; k++) {
				if(center_lat_coords_src[k] != center_lat_coords_src[0]){
					nlons_src = k;
					break;
				}
			}

			nlats_src = npnts_src / nlons_src;

			//std::cout << " src nlons is " << nlons_src << "  src nlats is " << nlats_src << std::endl;

			double *temp_lat_swp_src;
			double *temp_lon_swp_src;
			bool *temp_mask_src;
			temp_lat_swp_src = new double [npnts_src-nlons_src];
			temp_lon_swp_src = new double [npnts_src-nlons_src];
			temp_mask_src = new bool [npnts_src-nlons_src];

			for (k =0; k < npnts_src - nlons_src; k++) {
				temp_lat_swp_src[k] = center_lat_coords_src[k]; 
				temp_lon_swp_src[k] = center_lon_coords_src[k]; 
				temp_mask_src[k] = mask_src[k];
			}

			for (k = 0; k < nlons_src; k++) {
				center_lat_coords_src[k] = temp_lat_swp_src[npnts_src-2*nlons_src+k];
				center_lon_coords_src[k] = temp_lon_swp_src[npnts_src-2*nlons_src+k];
				mask_src[k] = temp_mask_src[npnts_src-2*nlons_src+k];
			}

			for (k = nlons_src; k < npnts_src - nlons_src; k++) {
				center_lat_coords_src[k] = temp_lat_swp_src[k-nlons_src];
				center_lon_coords_src[k] = temp_lon_swp_src[k-nlons_src];
				mask_src[k] = temp_mask_src[k-nlons_src];
			}

			for(k = nlons_src * 2; k <= npnts_src - nlons_src; k += nlons_src){
				my_swap(&center_lat_coords_src[k], &center_lat_coords_src[k+1]);
				my_swap(&center_lon_coords_src[k], &center_lon_coords_src[k+1]);
				my_swap_bool(&mask_src[k], &mask_src[k+1]);
			}


			//dst
			for (k = 0; sb_dst != se_dst; ++sb_dst, k++) {
				const MeshObj &node = *(sb_dst);
				double *c2 = dst_field->data(node);
				for(i = 0; i < 3; i++){
					co[i] = c2[i];
				}
				double *m = dst_mask_ptr->data(node);
				//mask_dst[k] = true;
				if(*m > 0.5)
					mask_dst[k] = false;
				else
					mask_dst[k] = true;
				center_lat_coords_dst[k] = 180 * cal_lats(co) / PI;
				center_lon_coords_dst[k] = 180 * cal_lons(co) / PI;
			}

			for (k = 0; k < npnts_dst; k++) {
				if(center_lat_coords_dst[k] != center_lat_coords_dst[0]){
					nlons_dst = k;
					break;
				}
			}

			nlats_dst= npnts_dst / nlons_dst;

			//std::cout << " dst nlons is " << nlons_dst << "  dst nlats is " << nlats_dst << std::endl;

			double *temp_lat_swp_dst;
			double *temp_lon_swp_dst;
			bool *temp_mask_dst;

			temp_lat_swp_dst = NULL;
			temp_lon_swp_dst = NULL;

			temp_lat_swp_dst = new double [npnts_dst-nlons_dst];
			temp_lon_swp_dst = new double [npnts_dst-nlons_dst];
			temp_mask_dst = new bool [npnts_dst-nlons_dst];
			// std::cout << "Bifbifbig is " << npnts_dst - nlons_dst << std::endl;



			for (k = 0; k < npnts_dst - nlons_dst; k++) {
				temp_lat_swp_dst[k] = center_lat_coords_dst[k]; 
				temp_lon_swp_dst[k] = center_lon_coords_dst[k]; 
				temp_mask_dst[k] = mask_dst[k];
			}

			for (k = 0; k < nlons_dst; k++) {
				center_lat_coords_dst[k] = temp_lat_swp_dst[npnts_dst-2*nlons_dst+k];
				center_lon_coords_dst[k] = temp_lon_swp_dst[npnts_dst-2*nlons_dst+k];
				mask_dst[k] = temp_mask_dst[npnts_dst-2*nlons_dst+k];
			}

			for (k = nlons_dst; k < npnts_dst - nlons_dst; k++) {
				center_lat_coords_dst[k] = temp_lat_swp_dst[k-nlons_dst];
				center_lon_coords_dst[k] = temp_lon_swp_dst[k-nlons_dst];
				mask_dst[k] = temp_mask_dst[k-nlons_dst];
			}

			for(k = nlons_dst * 2; k <= npnts_dst - nlons_dst; k += nlons_dst){
				my_swap(&center_lat_coords_dst[k], &center_lat_coords_dst[k+1]);
				my_swap(&center_lon_coords_dst[k], &center_lon_coords_dst[k+1]);	
				my_swap_bool(&mask_dst[k], &mask_dst[k+1]);
			}

			grid *src_grid, *dst_grid;

			src_grid = new grid(ndim_src, npnts_src, nlats_src, nlons_src, center_lat_coords_src, center_lon_coords_src, mask_src);
			dst_grid = new grid(ndim_dst, npnts_dst, nlats_dst, nlons_dst, center_lat_coords_dst, center_lon_coords_dst, mask_dst);

			Common_remap *remap_operators;

			//bilinear_remap_2D_operator *remap_operators;	
			remap_operators = new bilinear_remap_2D_operator(src_grid, dst_grid);

			remap_operators->init_remap();

			//FILE *fp;
			//if((fp = fopen("../../", "w+")) == NULL) {
			//	printf("Can not create weight file!\n");
			//	exit(1);
			//}

			/*
			   for(int ma = 0; ma < 10; ++ma) {
			   std::cout << "here st" << std::endl;
			   std::cout << remap_operators->wgt_indx_src[ma] << std::endl;
			   std::cout << remap_operators->wgt_values[ma] << std::endl;
			   std::cout << "here end " << std::endl;
			   }
			 */

			// edited by xunzhang
			int oo;
			for(oo = 0; oo < npnts_dst; ++oo) {
				IWeights::Entry row(oo+1, 0, 0.0, 1);
				//std::cout << "0 is hererererererer " << std::endl;
				std::vector<IWeights::Entry> col;
				//col.reserve(9);
				col.push_back(IWeights::Entry(remap_operators->wgt_indx_src[oo*4], 0, remap_operators->wgt_values[oo*4]));
				col.push_back(IWeights::Entry(remap_operators->wgt_indx_src[oo*4+1], 0, remap_operators->wgt_values[oo*4+1]));
				col.push_back(IWeights::Entry(remap_operators->wgt_indx_src[oo*4+2], 0, remap_operators->wgt_values[oo*4+2]));
				col.push_back(IWeights::Entry(remap_operators->wgt_indx_src[oo*4+3], 0, remap_operators->wgt_values[oo*4+3]));
				//std::cout << "row.id is : " << row.id << "       " << "row.idx is : " << row.idx << "       ";
				//std::cout << "row.value is : " << row.value << "       " << "row.src_id is : " << row.src_id << std::endl;

				//for(std::vector<IWeights::Entry>::iterator iter = col.begin(); iter != col.end(); ++iter)
				//	std::cout << "col info is : " << *iter << std::endl;

				wts.InsertRow(row, col);
			}

			//print_debug_info(wts);
			

			delete src_grid;
			delete remap_operators;
			// edited by xunzhang

			delete [] temp_lon_swp_src;
			delete [] temp_lon_swp_dst;
			delete [] temp_lat_swp_src;
			delete [] temp_lat_swp_dst;

			delete [] center_lat_coords_src;
			delete [] center_lon_coords_src;
			delete [] center_lat_coords_dst;
			delete [] center_lon_coords_dst;

			delete [] mask_src;
			delete [] mask_dst;

			//std::cout << "finally" << std::endl;
			//wts.Print(std::cout);
			//exit(0);
			// edit by xunzhang
			return 1; 
		}

		// csrv - Args are NON-COMMITTED meshes
		int csrv(Mesh &srcmesh, Mesh &dstmesh, IWeights &wts,
				MEField<> *src_iwts, MEField<> *dst_iwts,
				int *regridMethod, int *regridScheme, 
				int *regridPoleType, int *regridPoleNPnts, 
				int *unmappedaction) {


			// generate integration weights before pole, so 
			// they are distributed across non-pole nodes
			// (the node is factored out in the end)
			Integrate sig(srcmesh), dig(dstmesh);

			// Clear weights
			sig.clearWeights(src_iwts);
			dig.clearWeights(dst_iwts);

			// Add weights to meshes before poles
			// so all the weights are on user data points
			if ((*regridScheme == ESMC_REGRID_SCHEME_FULL3D) ||
					(*regridScheme == ESMC_REGRID_SCHEME_DCON3DWPOLE) ||
					(*regridScheme == ESMC_REGRID_SCHEME_FULLTOREG3D)) {
				for (UInt i = 1; i <= 7; ++i) {
					sig.AddPoleWeights(srcmesh,i,src_iwts);
					dig.AddPoleWeights(dstmesh,i,dst_iwts);
				}
			}

			// Add in other none-pole weights
			// (and do cross processor sum)
			sig.intWeights(src_iwts);
			dig.intWeights(dst_iwts);

#if 0
			// print out info of the iwts
			Mesh::iterator sni=srcmesh.node_begin(), sne=srcmesh.node_end();
			Mesh::iterator dni=dstmesh.node_begin(), dne=dstmesh.node_end();

			double ssum=0.0;
			for (; sni != sne; ++sni) {
				double *Sdata = src_iwts->data(*sni);
				ssum += *Sdata;
			}

			double dsum=0.0;
			for (; dni != dne; ++dni) {
				double *Ddata = dst_iwts->data(*dni);

				dsum += *Ddata;
			}

			printf("SW Sum=%20.17f \n",ssum);
			printf("DW Sum=%20.17f \n",dsum);
#endif

			// Pole constraints
			IWeights pole_constraints, stw;
			UInt constraint_id = dstmesh.DefineContext("pole_constraints");
			if ((*regridScheme == ESMC_REGRID_SCHEME_FULL3D) ||
					(*regridScheme == ESMC_REGRID_SCHEME_DCON3DWPOLE) ||
					(*regridScheme == ESMC_REGRID_SCHEME_FULLTOREG3D)) {
				if (*regridPoleType == ESMC_REGRID_POLETYPE_ALL) {
					for (UInt i = 1; i <= 7; ++i)
						MeshAddPole(dstmesh, i, constraint_id, pole_constraints);
				} else if (*regridPoleType == ESMC_REGRID_POLETYPE_NPNT) {
					for (UInt i = 1; i <= 7; ++i)
						MeshAddPoleNPnts(dstmesh, *regridPoleNPnts, i, constraint_id, pole_constraints);
				} else if (*regridPoleType == ESMC_REGRID_POLETYPE_TEETH) {
					for (UInt i = 1; i <= 7; ++i)
						MeshAddPoleTeeth(dstmesh, i, constraint_id, pole_constraints);
				}
			}

			// Get coordinate fields
			MEField<> &scoord = *srcmesh.GetCoordField();
			MEField<> &dcoord = *dstmesh.GetCoordField();

			// Create a layer of ghost elements since the patch method needs
			// a larger stencil.
			if (*regridMethod == ESMC_REGRID_METHOD_PATCH) {
				int num_snd=0;
				MEField<> *snd[3],*rcv[3];

				// Load coord field
				MEField<> *pdc = &dcoord;
				snd[num_snd]=pdc;
				rcv[num_snd]=pdc;
				num_snd++;

				// Load mask field
				MEField<> *pdm = dstmesh.GetField("mask");
				if (pdm != NULL) {
					snd[num_snd]=pdm;
					rcv[num_snd]=pdm;
					num_snd++;
				}

				// Load iwts field
				MEField<> *pdw = dstmesh.GetField("iwts");
				if (pdw != NULL) {
					snd[num_snd]=pdw;
					rcv[num_snd]=pdw;
					num_snd++;
				}

				dstmesh.CreateGhost();
				dstmesh.GhostComm().SendFields(num_snd, snd, rcv);
			}

			// make the field pairs for interpolation
			std::vector<Interp::FieldPair> fpairs;
			if (*regridMethod == ESMC_REGRID_METHOD_BILINEAR)
				fpairs.push_back(Interp::FieldPair(&dcoord, &scoord, Interp::INTERP_STD));
			else if (*regridMethod == ESMC_REGRID_METHOD_PATCH)
				fpairs.push_back(Interp::FieldPair(&dcoord, &scoord, Interp::INTERP_PATCH));

			// Build the rendezvous grids
			Interp interp(dstmesh, srcmesh, 0, fpairs, *unmappedaction);

			// Generate the backwards interpolation matrix
			interp(0, stw);


			// Factor out poles if they exist
			if ((*regridScheme == ESMC_REGRID_SCHEME_FULL3D) ||
					(*regridScheme == ESMC_REGRID_SCHEME_DCON3DWPOLE) ||
					(*regridScheme == ESMC_REGRID_SCHEME_FULLTOREG3D)) {
				if (*regridPoleType == ESMC_REGRID_POLETYPE_ALL) {
					stw.GatherToCol(pole_constraints);
					stw.AssimilateConstraints(pole_constraints);
				} else if (*regridPoleType == ESMC_REGRID_POLETYPE_NPNT) {
					stw.GatherToRowSrc(pole_constraints);
					stw.AssimilateConstraintsNPnts(pole_constraints);
				}
			}

			// L2 projection conservative interpolation
			interp.interpL2csrvM(stw, &wts, src_iwts, dst_iwts);

			// print out info of the iwts
			Mesh::iterator sni=srcmesh.node_begin(), sne=srcmesh.node_end();
			Mesh::iterator dni=dstmesh.node_begin(), dne=dstmesh.node_end();

#ifdef DEBUG
			int snegcount = 0;
			int stotalcount = 0;
			for (; sni != sne; ++sni) {
				double *Sdata = src_iwts->data(*sni);
				stotalcount++;
				if (*Sdata < 0) ++snegcount;
			}

			int dnegcount = 0;
			int dtotalcount = 0;
			for (; dni != dne; ++dni) {
				double *Ddata = dst_iwts->data(*dni);
				dtotalcount++;
				if (*Ddata < 0) ++dnegcount;
			}
#endif

			return 1;
		}

		// to generate the iwts again, and return to Fortran 
		int get_iwts(Mesh &mesh, MEField<> *iwts, int *regridScheme) {

			// generate integration weights
			Integrate ig(mesh);

			// Clear weights
			ig.clearWeights(iwts);

			// Add weights to meshes before poles
			// so all the weights are on user data points
			if ((*regridScheme == ESMC_REGRID_SCHEME_FULL3D) ||
					(*regridScheme == ESMC_REGRID_SCHEME_DCON3DWPOLE) ||
					(*regridScheme == ESMC_REGRID_SCHEME_FULLTOREG3D)) {
				for (UInt i = 1; i <= 7; ++i)
					ig.AddPoleWeights(mesh,i,iwts);
			}

			// Add in other none-pole weights
			// (and do cross processor sum)
			ig.intWeights(iwts);

			return 1;
		}

	}
